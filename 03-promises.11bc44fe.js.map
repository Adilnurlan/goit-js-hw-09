{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAiBC,SAASC,cAAc,UACxCC,EAAaF,SAASC,cAAc,yBACpCE,EAAYH,SAASC,cAAc,wBACnCG,EAAcJ,SAASC,cAAc,0BAI3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAO,CACXR,WACAC,SAEFQ,YAAW,WACLJ,EACFF,EAAQK,GAERJ,EAAOI,E,GAERP,E,IAfPR,EAAeiB,iBAAiB,SAmBhC,SAAqBC,GACnBA,EAAIC,iBACJ,IAAMC,EAAQC,OAAOlB,EAAWmB,OAC1BC,EAAOF,OAAOjB,EAAUkB,OACxBE,EAASH,OAAOhB,EAAYiB,OAClCG,QAAQC,IAAIN,GACZK,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZ,IAAK,IAAIG,EAAS,EAAGA,EAASH,EAAQG,GAAU,EAC9CF,QAAQC,IAAIN,EAAQG,EAAOI,GACzBrB,EAAcqB,EAAS,EAAGP,EAAQG,EAAOI,GACxCC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAEvE0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAAhC,GAASiC,OAAOI,QAAQ,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst BtnForPromises = document.querySelector('button');\nconst inputDelay = document.querySelector('input[name = \"delay\"]');\nconst inputStep = document.querySelector('input[name = \"step\"]');\nconst inputAmount = document.querySelector('input[name = \"amount\"]');\n\nBtnForPromises.addEventListener('click', dataPromise);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    const data = {\n      position,\n      delay,\n    };\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(data);\n      } else {\n        reject(data);\n      }\n    }, delay);\n  });\n}\n\nfunction dataPromise(evt) {\n  evt.preventDefault();\n  const delay = Number(inputDelay.value);\n  const step = Number(inputStep.value);\n  const amount = Number(inputAmount.value);\n  console.log(delay)\n  console.log(step)\n  console.log(amount)\n  for (let number = 0; number < amount; number += 1) {\n    console.log(delay + step * number)\n      createPromise(number + 1, delay + step * number)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$BtnForPromises","document","querySelector","$ce04d3a99e08e73b$var$inputDelay","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","data","setTimeout","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","console","log","number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.11bc44fe.js.map"}